package bot

import (
	"fmt"
	"log"
	newsFetcher "ticker-pulse-news-bot/internal/news_fetcher"
	dataFormatter "ticker-pulse-news-bot/internal/pkg/data_formatter"
	telegramBot "ticker-pulse-news-bot/internal/telegram_bot"
	workerPool "ticker-pulse-news-bot/internal/worker_pool"
	"time"
)

type Bot struct {
	tgBot      *telegramBot.TelegramBot
	workerPool *workerPool.WorkerPool
	news       []dataFormatter.NewsMap
}

func NewBot(maxWorkers int) (*Bot, error) {
	tgBot, err := telegramBot.NewTelegramBot()
	if err != nil {
		log.Fatal("[TICKER-PULSE-NEWS-BOT]: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: ", err)
		return nil, err
	}

	wp := workerPool.NewWorkerPool(maxWorkers)

	return &Bot{
		tgBot:      tgBot,
		workerPool: wp,
	}, nil
}

// –ó–∞–ø—É—Å–∫ –≤–º–µ—Å—Ç–µ —Å WorkerPool
func (b *Bot) Start() {
	log.Println("[TICKER-PULSE-NEWS-BOT]: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
	b.workerPool.Start()
	b.tgBot.SendMessageToChannel("üåê –ù–æ–≤–æ—Å—Ç–∏ –º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É")
	b.UpdateNews()
	b.PostNews()
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WorkerPool
func (b *Bot) Stop() {
	b.workerPool.Stop()
	log.Println("[TICKER-PULSE-NEWS-BOT]: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –ø–æ–¥—ä–µ–º–∞ –±–∞–∑—ã
func (b *Bot) UpdateNews() {
	nf := newsFetcher.NewNewsFetcher()
	b.workerPool.AddTask(func() {
		for {
			news, err := nf.FetchLastNews()
			if err != nil {
				log.Fatalf("[TICKER-PULSE-NEWS-BOT]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: %v", err)
			}

			b.news = news
			log.Printf("[TICKER-PULSE-NEWS-BOT]: –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
			time.Sleep(time.Duration(5 * time.Hour))
		}
	})
}

func (b *Bot) PostNews() {
	time.Sleep(time.Duration(2 * time.Minute))
	b.workerPool.AddTask(func() {
		for {
			for _, item := range b.news {
				b.tgBot.SendMessageToChannel(fmt.Sprintf("%v. %v %v", item.Title, item.Description, item.Link))
				time.Sleep(time.Duration(30 * time.Minute))
			}
		}
	})
}
